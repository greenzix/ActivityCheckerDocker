@page "/rooms/{roomId:int}/history"
@inject ActivityService activityService
@inject RoomService roomService
@inject NavigationManager navManager
@rendermode InteractiveServer


@if (activities != null)
{
	<div>
		<div class="mt-2">
			<h1 class="fw-bold">@roomName History:</h1>
		</div>

		<div class="mt-4">
			@foreach (var group in activities.GroupBy(ac => ac.date.Date))
			{
				<h3 class="mt-3 fw-bold">@group.Key.ToString("dd.MM.yyyy")</h3>

				<ul class="list-group">
					@foreach (var ac in group)
					{
						<li class="list-group-item @((ac.action == Models.Action.Join) ? "bg-success" : "bg-danger") text-dark bg-opacity-75">
							<div class="row fw-bold">
								@ac.username <div class="line"></div> @ac.date.ToString("HH:mm") <div class="line"></div> @ac.date.ToString("dd.MM.yyyy") <div class="line"></div> @ac.action.ToString()
							</div>
						</li>
					}
				</ul>
			}
		</div>
	</div>
}
else
{
	<p>loading...</p>
}


@code {

	List<RoomActivity>? activities;
	string roomName = string.Empty;

	[Parameter] public int roomId { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		activities = await activityService.GetRoomHistory(roomId);
		if (activities == null) navManager.NavigateTo("/");
		activities.Reverse();
		roomName = await roomService.GetRoomName(roomId);
		StateHasChanged();
	}

}
