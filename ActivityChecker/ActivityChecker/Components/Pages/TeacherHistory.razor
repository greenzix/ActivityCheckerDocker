@page "/teacher-history"
@using ActivityCheckerApi.Models.Entities
@inject TeacherService teacherService    
@inject NavigationManager navManager
@rendermode InteractiveServer

@if (selectedUser != null)
{
	<div>
		<div class="mt-2">
			<h1 class="fw-bold">@(selectedUser.name + "'s history'")</h1>
			<button type="button" @onclick=SelectAnotherStudent
			class="btn btn-primary">Select another student</button>
		</div>

		@if(activityHistory.Count != 0)
		{
			<div class="mt-4">
				@foreach (var group in activityHistory.GroupBy(ac => ac.date.Date))
				{
					<h3 class="mt-3 fw-bold">@group.Key.ToString("dd.MM.yyyy")</h3>

					<ul class="list-group">
						@foreach (var ac in group)
						{
							<li class="list-group-item @((ac.action == Models.Action.Join) ? "bg-success" : "bg-danger") text-dark bg-opacity-75">
								<div class="row fw-bold">
									@ac.roomName <div class="line"></div> @ac.date.ToString("HH:mm") <div class="line"></div> @ac.roomName <div class="line"></div> @ac.action.ToString()
								</div>
							</li>
						}
					</ul>
				}
			</div>
		}
		else
		{
			<h3>Loading or the student doesnt have any history...</h3>
		}
	</div>
}
else
{
	<div>
		<div class="mt-2">
			<h1 class="fw-bold">Select a student:</h1>
		</div>

		<div class="mt-2">
			<RadzenStack @rendermode=InteractiveServer rientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start" Gap="0.5rem" class="rz-p-sm-12">
				<RadzenLabel Text="Select a student" Component="DropDownBindValue" />
				<RadzenDropDown TValue="StudentDTO" @bind-Value=@selectedUser Change="@(args => OnStudentChange(args))" Data=studentList TextProperty="@nameof(StudentDTO.name)" Style="width: 100%; max-width: 400px;" Name="DropDownBindValue" />
			</RadzenStack>
		</div>
	</div>                   
}

@code {

	List<UserActivity> activityHistory = new();
	List<StudentDTO> studentList = new();
	StudentDTO ? selectedUser;


	protected override async Task OnInitializedAsync()
	{
		if (studentList.Count == 0)
		{
			studentList = await teacherService.GetAllStudentsAsync();
			StateHasChanged();
		}
	}


	private async Task OnStudentChange(object args)
	{
		selectedUser = (StudentDTO)args;
		activityHistory = await teacherService.GetHistoryForStudentAsync(selectedUser.id);
		StateHasChanged();
	}

	private async void SelectAnotherStudent()
	{
		selectedUser = null;
		StateHasChanged();
	}
}
